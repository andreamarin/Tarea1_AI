99 PROBLEMS LISP

1.  (defun mylast(lst) (car (reverse list)))
2. (defun but-last(lst) (append (car (reverse lst)) (cadr (reverse last)))
3. (defun element-at (lst n)
(cond (or (null lst) (= n 0))
(defun element-at (lst n)
(cond (or (null lst) (= n 0))
)))
)

4. (defun len(lst)
(cond
((null lst) 0)
(t (+ 1 (len (cdr lst))))))

5. (defun rev(lst)
(cond((null lst) NIL)
(t (append (rev (cdr lst)) (list (car lst)))))))

6. (defun palindrome (lst)
(cond 
((or (null lst) (null (cdr lst))))
((not (equal (car let) (car (reverse lst)))) NIL)
(t (palindrome (reverse (cdr (reverse (cdr lst)))))))

7. (defun aplanar (lst)
(cond
((null lst) '())
((atom (car lst)) (append (list (car lst)) (aplanar (cdr lst))))
(t (append (aplanar (car lst)) (aplanar (cdr lst))))))

8. (defun compress (lst)
(cond
((null lst) '())
((equal (car lst) (cadr lst)) (compress (cdr lst)))
(t (append (list (car lst)) (compress (cdr lst))))))

9.
(defun pack (lista)
(if (eql lista nil) nil (cons (pega lista) (pack (tira lista))))
)


(defun pega (lista)
(cond ((eql lista nil) nil)
((eql (cdr lista) nil) lista)
((equal (car lista) (cadr lista))
(cons (car lista) (pega (cdr lista))))
(t (list (car lista))))
)


(defun tira (lista)
(cond ((eql lista nil) nil)
((eql (cdr lista) nil) nil)
((equal (car lista) (cadr lista))
(tira (cdr lista)))
(t (cdr lista))
)
)


10. (defun encode(lst)
(cond
((null lst))
(t (mapcar #'(lambda (lst2) (cons (length lst2) (list (car lst2)))) (pack lst)))))

11.(defun encode-mod(lst)
(cond
((null lst))
(t (mapcar #'(lambda (lst2) (cond 
((= (length lst2) 1) (car lst2)) 
(t(cons (length lst2) (list (car lst2)))))) 
(pack lst)))))


11. (defun decode (lst)
(cond
((null lst))
(t mapcar #â€™(lambda (lst2) (dotimes (car lst2) (cadr lst2))

12.

13.

14. (defun dup(lst)
(cond((null lst))
((atom lst) (cons lst (list lst)))
(t (apply #'append (mapcar #'dup lst))))))

15. (defun rep (lst n)
(apply #'append (mapcar #'(lambda (lst2) (setq c 0 res '())(dotimes (c n res) (push lst2 res))) lst)))

16. (defun drop (lst n)
(if (< n (length lst))(append (reverse (nthcdr (- (length lst) (- n 1)) (reverse lst))) (nthcdr n lst))))

17. (defun split (lst n)
(append (list (reverse (nthcdr (- (length lst) n) (reverse lst)))) (list (nthcdr n lst))))

18. (defun slice (lst i k)
(reverse (nthcdr (- (length lst) k) (reverse (nthcdr (- i 1) lst)))))

19. 
(defun rotate(n lst)
(cond
((< n 0)(append  (nthcdr (+ (length lst) n) lst) (reverse (nthcdr (* -1 n) (reverse lst)))))
(t (append (nthcdr n lst) (reverse (nthcdr (- (length lst) n) (reverse lst)))))))

20. (defun remove-at (lst n)
(append (reverse (nthcdr (- (length lst) (DECF n)) (reverse lst))) (nthcdr (INCF n) lst)))

21. 
(defun insert-at (obj lst n)
(append (append (reverse (nthcdr (- (length lst) (- n 1))(reverse lst))) (list obj)) (nthcdr  (- n 1) lst)))

22. (defun range(i n)
(cond 
((< i n) (cond
((= i n) (list i))
(t (cons i (range (INCF i) n)))))
(t (cond 
((= i n) (list i))
(t (cons i (range (DECF i)n)))))))























